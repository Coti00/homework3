<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>프로필</title>
    <style>
        /* 기본적인 스타일 리셋 */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
         /* 헤더 스타일 */
        header {
            width: 100%;
            background-color: #2c3e50;
            color: white;
            padding: 10px 0;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 90%;
            max-width: 1200px;
            margin: 0 auto;
        }

        #userName {
            font: bold 20px 'arial';
            margin-bottom: 30px;
        }

        #logoutBtn, #myPageBtn, #companyinfo {
            color: white;
            font: 500 15px 'arial';
            margin-inline: 10px;
        }

        #logoutBtn:hover, #myPageBtn:hover, #companyinfo:hover {
            cursor: pointer;
            color: gray;
        }

        /* 기본 body 스타일 */
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f7fc;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: #333;
            min-height: 100vh;
        }

        h1 {
            font-size: 2rem;
            margin-bottom: 20px;
            text-align: center;
        }

        /* 프로필 액션들 */
        .profile-actions {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            margin-top: 30px;
        }

        .profile-actions button, .profile-actions a {
            background-color: #2c3e50;
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
            text-decoration: none;
            transition: background-color 0.3s ease;
        }

        .profile-actions button:hover, .profile-actions a:hover {
            cursor: pointer;
        }

        .profile-actions a {
            text-align: center;
        }

        .profile-actions button:disabled {
            background-color: #bdc3c7;
            cursor: not-allowed;
        }

        /* 프로필 정보 */
        .profile-info {
            margin-top: 20px;
            font-size: 16px;
            width: 100%;
            max-width: 600px;
            margin-bottom: 30px;
        }

        .profile-info h3 {
            margin-bottom: 15px;
            font-size: 1.2rem;
        }

        .profile-info ul {
            list-style-type: none;
            padding: 0;
        }

        .profile-info li {
            margin-bottom: 10px;
        }

        /* 페이지네이션 스타일 */
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
            font-size: 14px;
        }

        .pagination button {
            font: bold 12px 'arial';
            padding: 5px 7px;
            color: white;
            background-color: #2c3e50;
            border: none;
            border-radius: 5px;
        }


        .pagination button:hover {
            cursor: pointer;
        }

        .pagination span {
            margin: 0 10px;
            font-weight: bold;
        }

        /* 북마크 삭제 버튼 */
        .delete-bookmark {
            color: #e74c3c; /* 빨간색 */
            font: bold 13px 'arial';
            margin-left: 10px;
        }

        .delete-bookmark:hover {
            cursor: pointer;
        }
        #logotitle{
            font: bold 20px 'arial';
        }
        #logotitle:hover{
            cursor: pointer;
        }

        #headerwrapper{
            display: flex;
            flex-direction: row;
            align-items: center;
        }
        .delete-application {
            color: #e74c3c; /* 빨간색 */
            font: bold 13px 'arial';
            margin-left: 10px;
        }

        .delete-application:hover {
            cursor: pointer;
        }

        #editProfileBtn{
            margin-bottom: 50px;
            font: bold 14px 'arial';
            margin: 10px 0;
            padding: 5px 10px;
        }
        #deleteAccountBtn{
            background: transparent;
            color: red;
            margin-bottom: 50px;
            font: bold 14px 'arial';
        }
    </style>
</head>
<body>
    <header style="margin-bottom: 30px;">
        <div class="header-content">
            <p id="logotitle"  onclick = "window.location.href = '/main'">알려잡!</p>
            <div id="headerwrapper">
                <p id="companyinfo" onclick="window.location.href='/companyinfo'">회사찾기</p>
                <p id="myPageBtn" onclick="window.location.href='/profile'">My Page</p>
                <p id="logoutBtn" onclick="window.location.href='/'">로그아웃</p>
            </div>
        </div>
    </header>

    <span id="userName"></span>

    <div class="profile-info">
        <h3>북마크 목록</h3>
        <ul id="bookmarksList">
            <!-- 북마크 항목들이 동적으로 삽입됩니다 -->
        </ul>
        <div id="bookmarksPagination" class="pagination">
            <!-- 페이지네이션 버튼들 -->
        </div>
    </div>

    <div class="profile-info">
        <h3>지원 내역</h3>
        <ul id="applicationsList">
            <!-- 지원 내역 항목들이 동적으로 삽입됩니다 -->
        </ul>
        <div id="applicationsPagination" class="pagination">
            <!-- 페이지네이션 버튼들 -->
        </div>
    </div>

    <div class="profile-info">
        <h3>사용자 활동 기록</h3>
        <ul id="userLogsList">
            <!-- 활동 기록 항목들이 동적으로 삽입됩니다 -->
        </ul>
        <div id="userLogsPagination" class="pagination">
            <!-- 페이지네이션 버튼들 -->
        </div>
    </div>

    <div class="profile-actions">
        <!-- 회원정보 수정 버튼 -->
        <button id="editProfileBtn">회원정보 수정</button>
        
        <!-- 회원탈퇴 버튼 -->
        <button id="deleteAccountBtn">회원탈퇴</button>
    </div>

    <script>
        const token = localStorage.getItem('accessToken');
        let bookmarksPage = 1;
        let logsPage = 1;
        let applicationsPage = 1;
        const itemsPerPage = 5;

        // 로그인 확인
        if (token) {
            fetch('http://localhost:3000/auth/profile', {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` },
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    document.getElementById('userName').textContent = `환영합니다, ${data.data.profile.name}님`;
                } else {
                    alert('프로필을 가져오는 데 실패했습니다.');
                }
            });

            // 북마크 목록 가져오기
            function loadBookmarks(page) {
                fetch(`http://localhost:3000/auth/bookmarks?page=${page}&limit=${itemsPerPage}`, {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}` }
                })
                .then(response => response.json())
                .then(data => {
                    const bookmarksList = document.getElementById('bookmarksList');
                    bookmarksList.innerHTML = ''; // 기존 목록 비우기
                    data.data.forEach(bookmark => {
                        if (bookmark.jobId && bookmark.jobId.title) {  // jobId가 null이 아니고 title이 존재하는 경우만 처리
                            const listItem = document.createElement('li');
                            listItem.innerHTML = `${bookmark.jobId.title} 
                                <span class="delete-bookmark" data-bookmark-id="${bookmark.jobId._id}">삭제</span>`;
                            bookmarksList.appendChild(listItem);
                        }
                    });

                    // 북마크 삭제 이벤트
                    document.querySelectorAll('.delete-bookmark').forEach(deleteBtn => {
                        deleteBtn.addEventListener('click', function() {
                            const bookmarkId = this.getAttribute('data-bookmark-id');
                            deleteBookmark(bookmarkId, this);
                        });
                    });

                    // 페이지네이션
                    const pagination = document.getElementById('bookmarksPagination');
                    pagination.innerHTML = ''; // 페이지네이션 초기화
                    const totalPages = data.pagination.totalPages;
                    if (totalPages > 1) {
                        if (bookmarksPage > 1) {
                            const prevButton = document.createElement('button');
                            prevButton.textContent = '이전';
                            prevButton.addEventListener('click', () => {
                                bookmarksPage--;
                                loadBookmarks(bookmarksPage);
                            });
                            pagination.appendChild(prevButton);
                        }
                        const pageSpan = document.createElement('span');
                        pageSpan.textContent = `${bookmarksPage} / ${totalPages}`;
                        pagination.appendChild(pageSpan);
                        if (bookmarksPage < totalPages) {
                            const nextButton = document.createElement('button');
                            nextButton.textContent = '다음';
                            nextButton.addEventListener('click', () => {
                                bookmarksPage++;
                                loadBookmarks(bookmarksPage);
                            });
                            pagination.appendChild(nextButton);
                        }
                    }
                })
                .catch(error => console.log('북마크 로드 오류:', error));
            }
            loadBookmarks(bookmarksPage);

            // 활동 기록 가져오기
            function loadUserLogs(page) {
                fetch(`http://localhost:3000/auth/logs?page=${page}&limit=${itemsPerPage}`, {
                    method: 'GET',
                    headers: { 'Authorization': `Bearer ${token}` }
                })
                .then(response => response.json())
                .then(data => {
                    const userLogsList = document.getElementById('userLogsList');
                    userLogsList.innerHTML = ''; // 기존 활동 기록 비우기
                    data.data.forEach(log => {
                        const listItem = document.createElement('li');
                        const logDate = new Date(log.timestamp);
                        const formattedDate = `${logDate.getFullYear()}-${String(logDate.getMonth() + 1).padStart(2, '0')}-${String(logDate.getDate()).padStart(2, '0')} ${String(logDate.getHours()).padStart(2, '0')}:${String(logDate.getMinutes()).padStart(2, '0')}`;

                        listItem.textContent = `${log.activityType} (${formattedDate})`;
                        userLogsList.appendChild(listItem);
                    });

                    // 페이지네이션
                    const pagination = document.getElementById('userLogsPagination');
                    pagination.innerHTML = ''; // 페이지네이션 초기화
                    const totalPages = data.pagination.totalPages;
                    if (totalPages > 1) {
                        if (logsPage > 1) {
                            const prevButton = document.createElement('button');
                            prevButton.textContent = '이전';
                            prevButton.addEventListener('click', () => {
                                logsPage--;
                                loadUserLogs(logsPage);
                            });
                            pagination.appendChild(prevButton);
                        }
                        const pageSpan = document.createElement('span');
                        pageSpan.textContent = `${logsPage} / ${totalPages}`;
                        pagination.appendChild(pageSpan);
                        if (logsPage < totalPages) {
                            const nextButton = document.createElement('button');
                            nextButton.textContent = '다음';
                            nextButton.addEventListener('click', () => {
                                logsPage++;
                                loadUserLogs(logsPage);
                            });
                            pagination.appendChild(nextButton);
                        }
                    }
                })
                .catch(error => console.log('활동 기록 로드 오류:', error));
            }
            loadUserLogs(logsPage);
        } else {
            alert('로그인이 필요합니다.');
            window.location.href = '/'; // 로그인 페이지로 리디렉션
        }

        // 회원정보 수정 버튼 클릭 시 동작
        document.getElementById('editProfileBtn').addEventListener('click', () => {
            window.location.href = '/editprofile'; // 회원정보 수정 페이지로 리디렉션
        });

        // 회원탈퇴 버튼 클릭 시 동작
        document.getElementById('deleteAccountBtn').addEventListener('click', () => {
            if (confirm('정말로 계정을 삭제하시겠습니까?')) {
                fetch('http://localhost:3000/auth/profile', {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                    },
                })
                .then(response => {
                    if (response.status === 204) {
                        // 204 상태 코드: 본문 없음
                        return { status: 'success', message: 'Account deleted successfully' };
                    } else if (response.ok) {
                        return response.json(); // JSON 응답 처리
                    } else {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                })
                .then(data => {
                    if (data.status === 'success') {
                        alert('계정이 삭제되었습니다.');
                        localStorage.removeItem('accessToken');
                        window.location.href = '/'; // 로그인 페이지로 리디렉션
                    } else {
                        alert('계정 삭제에 실패했습니다.');
                    }
                })
                .catch(error => {
                    console.error('계정 삭제 오류:', error);
                    alert('계정 삭제 중 오류가 발생했습니다.');
                });
            }
        });

        // 북마크 삭제
        function deleteBookmark(bookmarkId, deleteBtnElement) {
            const token = localStorage.getItem('accessToken');
            if (!token) {
                alert('로그인이 필요합니다.');
                return;
            }

            // 로컬 스토리지에서 북마크 삭제
            let userBookmarks = JSON.parse(localStorage.getItem('userBookmarks')) || [];
            userBookmarks = userBookmarks.filter(id => id !== bookmarkId); // 해당 북마크 삭제
            localStorage.setItem('userBookmarks', JSON.stringify(userBookmarks));

            // UI에서 북마크 항목 제거
            deleteBtnElement.parentElement.remove();

            console.log("삭제 요청된 bookmarkId:", bookmarkId); // 삭제할 bookmarkId 출력

            fetch('http://localhost:3000/auth/bookmarks', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ jobId: bookmarkId })  // 북마크 삭제 요청
            })
            .then(response => {
                console.log("서버 응답:", response); // 서버 응답 출력
                return response.json();
            })
            .then(data => {
                console.log("응답 데이터:", data); // 응답 데이터 출력
                if (data.status === 'success') {
                    alert('북마크가 삭제되었습니다.');
                } else {
                    alert('북마크 삭제 실패');
                }
            })
            .catch(error => {
                console.error('북마크 처리 오류:', error);
                alert('북마크 처리 중 오류가 발생했습니다.');
            });
        }

        // 지원 내역 가져오기
        function loadApplications(page) {
            fetch(`http://localhost:3000/auth/applications?page=${page}&limit=${itemsPerPage}`, {
                method: 'GET',
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('응답 데이터:', data); // 응답 데이터 확인

                const applicationsList = document.getElementById('applicationsList');
                applicationsList.innerHTML = ''; // 기존 목록 비우기

                const applications = data.data?.applications || [];
                applications.forEach(application => {
                    if (application.jobId && application.jobId.title) {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `
                            ${application.jobId.title} 
                            <span class="delete-application" data-application-id="${application._id}">지원 취소</span>
                        `;
                        applicationsList.appendChild(listItem);
                    } else {
                        console.warn('jobId 또는 title이 없는 지원 항목:', application);
                    }
                });

                // 지원 취소 이벤트 추가
                document.querySelectorAll('.delete-application').forEach(deleteBtn => {
                    deleteBtn.addEventListener('click', function() {
                        const applicationId = this.getAttribute('data-application-id');
                        cancelApplication(applicationId, this.parentElement);
                    });
                });

                // 페이지네이션 처리
                const pagination = document.getElementById('applicationsPagination');
                pagination.innerHTML = ''; // 페이지네이션 초기화

                const totalPages = data.pagination?.totalPages || 1; // 총 페이지 수 가져오기

                if (totalPages > 1) {
                    if (page > 1) { // 이전 버튼 추가
                        const prevButton = document.createElement('button');
                        prevButton.textContent = '이전';
                        prevButton.addEventListener('click', () => {
                            loadApplications(page - 1); // 이전 페이지 로드
                        });
                        pagination.appendChild(prevButton);
                    }

                    const pageSpan = document.createElement('span'); // 현재 페이지 / 총 페이지 표시
                    pageSpan.textContent = `${page} / ${totalPages}`;
                    pagination.appendChild(pageSpan);

                    if (page < totalPages) { // 다음 버튼 추가
                        const nextButton = document.createElement('button');
                        nextButton.textContent = '다음';
                        nextButton.addEventListener('click', () => {
                            loadApplications(page + 1); // 다음 페이지 로드
                        });
                        pagination.appendChild(nextButton);
                    }
                } else {
                    const pageSpan = document.createElement('span');
                    pageSpan.textContent = `1 / 1`;
                    pagination.appendChild(pageSpan);
                }
            })
            .catch(error => console.error('지원 내역 로드 오류:', error));
        }

        loadApplications(applicationsPage);

        function cancelApplication(applicationId, listItemElement) {
            fetch(`http://localhost:3000/auth/applications/${applicationId}`, {
                method: 'DELETE',
                headers: { 'Authorization': `Bearer ${token}` }
            })
            .then(response => response.json())
            .then(data => {
                if (data.status === 'success') {
                    listItemElement.remove(); // 성공 시 UI에서 항목 제거
                    alert('지원 내역이 취소되었습니다.');
                } else {
                    alert('지원 취소에 실패했습니다.');
                }
            })
            .catch(error => console.error('지원 취소 오류:', error));
        }


    </script>
</body>
</html>
